mod bencode;
mod connection;
mod constants;
mod peers;
mod torrent;
mod utils;

use bencode::Decoder;
use std::{fs::File, io::Read};
use torrent::Torrent;

fn main() -> std::io::Result<()> {
    let peer_id = utils::new_peer_id();
    let path = "debian.torrent";
    let mut file = File::open(path)?;
    let mut buf = vec![];
    file.read_to_end(&mut buf)?;

    // add error handling here maybe for all of those function calls
    let bencode_data = Decoder::new(&buf).start().unwrap();
    let torrent_data = Torrent::new(bencode_data).unwrap();
    let info_hash = torrent_data.info_hash;
    let peers = peers::get_peers(torrent_data, peer_id).unwrap();
    println!("{:?}", peers);
    let connection = connection::start(peers, info_hash, peer_id).unwrap();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //let mut peers = tracker::Peers::new(buf).unwrap();
    //// match here
    //
    ////let peers = peers.get_peers().unwrap();
    //let peers = match peers.get_peers() {
    //    Ok(peers) => peers,
    //    Err(_) => {
    //        println!("couldn't get peers's ids");
    //        std::process::exit(1);
    //    }
    //};
    //
    //println!("list of peers {:?}", peers);
    //
    //println!("\x1b[93m////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\x1b[0m");
    //println!("\x1b[93m////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\x1b[0m");
    //println!("\x1b[93m////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\x1b[0m");
    //println!("\x1b[93m////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\x1b[0m");
    //println!("\x1b[93m////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\x1b[0m");
    //
    //let _ = download::download(peers);

    Ok(())
}
